What happens when you initialize a repository? Why do you need to do it?

	- git init: creates a new Git repository.
	- git status : shows what files have changed since the last commit.

	Création fichier fichier .git pour "traquer" les métadonnées relatives à l'historique du projet.


How is the staging area different from the working directory and the repository?
What value do you think it offers?

How can you use the staging area to make sure you have one commit per logical
change?

	- git add nom_fichier: ajout dans le staging area pour connaître les fichiers du projet à suivre (et donc connaître l'historique des modifications apportées); permet ainsi de les commiter.
	
	- git reset nom_fichier: replace le fichier malencontreusement ajouté dans le working directory.

	- git diff (no arguments): comparaison entre staging area et working directory. Une fois les modifs validées (git add nom_fichier), l'état du fichier étant similaire dans chaque entitée, on ne détecte plus de différence.

	-git diff --staged: comparaison entre staging area et repository (commit le plus récent). Spécifie donc un update n'ayant pas été encore commité (en attente). 

	-git reset --hard: supprime modifs au niveau du WD mais également du staging area.

	-git checkout master: en relation avec le 'detached head state message' (obtenu par checkout old_commit), où Git avertit l'utilisateur que ce commit ancien n'est pas labellé avec un nom de branche.



What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

	- git branch (no arguments): exprime la branche courante.
	- git branch name_branch : création nvlle branche.
	- git checkout name_branch : switch pour update sur la nouvelle branche labellisée.

	Utilisation pple: tester nouvelles fonctionnalités sans interférer sur le projet principal.


How do the diagrams help you visualize the branch structure?

    - git log --graph --oneline master branch_name

    Notions de "reachability" : détachement sur une branche à partir d'un git checkout commit (retour à un commit antérieur dont l'update sera détaché obligatoirement de la branche master par ex mais dépendra donc du commit parent).

    nota: utilité d'une représentation graphique symbolisant les commits par branche ainsi que la non-linéarité de ceux-ci (selon checkout branch ou checkout commit = nouveau point de départ).	

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

   - git checkout -b new_branch-name: pour créer une nouvelle branche qui contiendra les futurs commits à partir du "checkout commit" (detached from HEAD qui signifie commit en cours).

   - git merge master branch_name (coins par ex): rappatrie l'historique des commits de la new_feature dans la master (depuis celle-ci => git branch ou git checkout master).

   nota: git merge --abort: restaure l'état préalable au merge.

   - si no conflicts => git log pour consulter l'historique global (commits classés par date donc intercalement possible...)

   - git show n°commit (suite à git diff com1 com2) pour visualiser l'update avec le commit parent (automatique).

   - git branch -d (delete) branch_name: effacement de la branche (son appellation, pas les commits !)

   exo: this.color="yellow";
   		this.solid="true"; rajout d'une nouvelle fonctionalité à la fonction Coin.

   		a) git show n°commit (add color) pour étudier l' ajout de la couleur par le code (game.js).
   		b) git diff --graph --oneline pour visualiser (à partir du merge) l'insertion de la branche coin et comparer son commit final avec celui précédent l'initialisation de la branche.
   		Ainsi, on repère la création de la fonction Coin.
   		c) Désormais, on peut updater game.js
   		d)on teste dans le navigateur
   		e)git diff pour la forme(check notre modif à nouveau et on repère les 2 lignes + en vert correspondantes) puis add et commit dans la foulée !!!
   	
   	nota: create the merge node: git log -n 1 (voir le dernier commit pour vérifier son intitulé par ex.)

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?

	b) faire un merge manuel permet de garder le contrôle sur le code en comparant son propre code (modifié dans master) avec la partie "merged commune" (initiale) ainsi que les modifs effectuées par un collaborateur concernant cette partie analogue. Dès lors, il devient possible d'adapter son code de manière judicieuse en confrontant éventuellement son point de vue avec l'autre utilisateur.